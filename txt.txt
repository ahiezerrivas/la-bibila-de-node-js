//****************Video 56**************** //
crear un cluster en mongodbatlas free
    usar azure 
        virginia

npm i mongoose 
npm i node-cron axios cheerio

ejecutar node index 

//****************Video 56**************** //

//****************Video 57**************** //
npm i dotenv

    Se crea el archivo .env en donde va la clave de mongodb atlas, se crea la carpeta models
    y se modifica el archivo index.js
//****************Video 57**************** //


//****************Video 62**************** //
instalar dentro de la carpeta BACKENDVSFRONTED/backend npm i cors express mongoose  
    se crea el archivo con npm init
	npm i -D dotenv nodemon
	se crea el archivo .env
//****************Video 62**************** //

//****************Video 63**************** //
Descargar los archivos assets
	el img y el data.seeder.json y copiar la infromacion en el archivo que esta dentro de seeds 
		
//****************Video 63**************** //

//****************Video 64**************** //
Crear el archivo technology.model.js 
	ejecutar npm run seed
	Verificar en mongodb atlas
//****************Video 64**************** //

//****************Video 65**************** //
Se modifica el archivo server/index.js
//****************Video 65**************** //

//****************Video 68**************** //
Descargar typeScript 
	se crea la carpeta TS REVIEW y dentro de esta 01.TYPES
		Crear con el comando tsc --init para empezar a crear las configuraciones de un proyecto en TypeScript
		se crea el archivo index.ts 
		ejecutar el comando tsc para convertir el archivo en javascript y correrlo con node index.js
//****************Video 68**************** //

//****************Video 69**************** //
Dentro de la carpeta TS REVIEW se crea la carpeta 02.Functions
	se crea el archivo index.ts 
		ejecutar el comando tsc para convertir el archivo en javascript y correrlo con node index.js

//****************Video 69**************** //


//****************Video 70**************** //
Dentro de la carpeta TS REVIEW se crea la carpeta 03.Interfaces
	se crea el archivo index.ts 
//****************Video 70**************** //

//****************Video 71**************** //
Dentro de la carpeta TS REVIEW se crea la carpeta 04.Classes
	Crear con el comando tsc --init para empezar a crear las configuraciones de un proyecto en TypeScript
	se crea el archivo index.ts 
	ejecutar el comando tsc para convertir el archivo en javascript y correrlo con node index.js
//****************Video 71**************** //

//****************Video 72**************** //

Dentro de la carpeta TS REVIEW se crea la carpeta 04.Classes
	Crear con el comando tsc --init para empezar a crear las configuraciones de un proyecto en TypeScript
	se crea el archivo index.ts 
	en el archivo tsconfig descomenta "experimentalDecorators"
	ejecutar el comando tsc  aunque diga el editor de codigo que hay errores para convertir el archivo en javascript y correrlo con node index.js
//****************Video 72**************** //

//****************Video 73**************** //
en la carpeta de backendvsfronend ejecutar el comando ng new frontend 
	routing y
	css 
cd frontend
	ng serve
//****************Video 73**************** //

//****************Video 74**************** //
cd frontend
	ng g c components/technologyCard
	crear una carpeta que se llame models y dentro de esta un arhcivo que se llame technology.model.ts
	ejecutar ng g c pages/about
	ejecutar ng g c pages/search
	ejecutar ng g c pages/technologies
	ejecutar ng g c pages/technology
	ejecutar ng g c pages/home
	ng g s services/http
	ng g c shared/navbar
//****************Video 74**************** //

//****************Video 75**************** //
copiar el cdn de boostrap junto con el js
buscar en components de botstrap el navbar y pegarlo en el archivo navbar.component.html


<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <a class="navbar-brand" href="#">CodingApp</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item active" routerLinkActive="active">
        <a class="nav-link" [routerLink]="['home']">Home</a>
      </li>
      <li class="nav-item" routerLinkActive="active">
        <a class="nav-link" [routerLink]="['technologies']">Technologies</a>
      </li>
       <li class="nav-item" routerLinkActive="active">
        <a class="nav-link" [routerLink]="['about']">About</a>
      </li>
      
    </ul>
    <form class="form-inline my-2 my-lg-0">
      <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>
  </div>
</nav>


en el archivo app-routing.module.ts
	
		const routes: Routes = [
		{
			pathh: "home",
			component: HomeComponent
		},
		{
			pathh: "about",
			component: AboutComponent
		},
		{
			pathh: "technologies",
			component: TechnologiesComponent
		},
		{
			pathh: "technology/:id",
			component: TechnologyComponent
		},
		{
			pathh: "search/query",
			component: SearchComponent
		},
		{
			pathh: "**",
			patchmatch: "full",
			redirectTo: "home"
		}
	];
	
en el app.component.html
	borrar todo y copiar 
		<app-navbar></app-navbar>
		<div class="container">
			<router-outlet></router-outlet>
		</div>
		
en el home.component.html
	<h1>Hello World from Angular</h1>
		
//****************Video 75**************** //
